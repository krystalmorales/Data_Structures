# (A) Title: HW1_CharArrayList
# By Krystal Morales

## (B) Purpose: The purpose of this program is to implement a char array list

* (C) Acknowledgements:
  * I used Google and ChatGPT when stuck writing code or didn't understand error messages in the terminal 

* (D) Provided files and short description:
  * CharArrayList.h
    * This file is a class declaration, it contains the public functions for CharArrayList as well as the private helper functions and data members
  * CharArrayList.cpp
    * This file contains the definitions for the CharArrayList class each function that was declared in CharArrayList.h is defined in this file
  * unit_tests.cpp
    * This file contains various test cases for each funtion that was defined in CharArrayList.cpp and declared in CharArrayList.h

* (E) Compile/Run:
    * To compile my program do so by running "make unit_tests" followed by "./unit_tests"

* (F) Data structures outline:
    * CharArrayList is a dynamic array-based list that stored characters 
    * Dynamic resizing was used as array lists can dynamically resize
    * Array lists provide constant-time access to elements using an index, this is because elements are stored in a contiguous memory location
    * Insertion and deletion of elements were also used in this program and these operations may require shifting elements, resulting in a time complexity of O(n), where n is the number of elements in the list.
    * Adantages of using array lists:
      * Array lists provide efficient access to elements, by using index. Another advantage is that array lists can dynamically be resized.
    * Disadvanages of using array lists:
      * Inserting or deleting elements in the middle of an array list can be expensive since it requires shifting elements to accommodate the change. Array lists may allocate more memory than needed due to the need for occasional resizing.

* (G) Testing:
    * I tested various parts of my program by breaking each function down and thinking of the scenarios that needed to be tested, these include making sure the function does what it's suppose to with the correct and incorrect information, and testing for edge cases. I tested the program as a whole by incorporating different function in my unit tests, for example by using pushAtBack throughout various unit_tests, or isEmpty to varify that the function I was testing was functioning correctly.

* (H) Hours spent on hw:
    * I spent 10 hours working on this hw.

* (I) Questions regarding the time measurements:
1. Fastest to slowest
   
  * INSERTION OPERATION                                 Time (nanoseconds)

    * pushAtBack 100 times                                557             
    * insertAt middle of list 100 times                   1471677           
    * pushAtFront 100 times                              2604108

  * REMOVAL OPERATION                                   Time (nanoseconds)
    * popFromBack 100 times                               753           
    * removeAt middle of list 100 times                   1675577               
    * popFromFront 100 times                             3349310           


  * ACCESS OPERATION                                    Time (nanoseconds)
    * call last() 100 times                               502               
    * call first() 100 times                              511               
    * call elementAt() for middle of list 100 times       560               


2. Why were certain operations so much faster or slower than others? Some opertations were faster than others because of the underlaying array list structure. Adding and popping 
   elements from the back is generallyfast, while nserting, removing, and accessing elements in the middle or front of the list is slower due to shifiting elements.
   Which operations took approximately the same amount of time? pushAtBack and elementAt() took approximately the same amount of time. 
   What are the features of array lists that caused these disparities or similarities in times? While array lists offer fast access to elements, due to being able to use index to get to an element, they are slower when we need to access in the middle due to the need to shift the elements. 